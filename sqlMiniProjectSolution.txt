/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */


SELECT name
FROM Facilities
WHERE membercost >0
LIMIT 0 , 30



/* Q2: How many facilities do not charge a fee to members? */

SELECT COUNT( name )
FROM Facilities
WHERE membercost =0


/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */

SELECT *
FROM `Facilities`
WHERE membercost < ( monthlymaintenance * 0.2 )
LIMIT 0 , 30


/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */

SELECT *
FROM `Facilities`
WHERE facid
IN ( 1, 5 )
LIMIT 0 , 30


/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */

SELECT name, monthlymaintenance,
CASE WHEN monthlymaintenance >100
THEN 'expensive'
ELSE 'cheap'
END AS cheapexpensive
FROM `Facilities`
LIMIT 0 , 30


/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */

SELECT firstname, surname, joindate
FROM `Members`
ORDER BY joindate DESC
LIMIT 0 , 30



/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

select b.facid, f.name, concat(m.firstname,' ',m.surname) as membername, b.cost
from Bookings as b
inner join Members as m
	on m.memid = b.memid
inner join Facilities as f
	on f.facid = b.facid
where b.date = '2012-09-14' and b.cost > 30
order by b.cost desc



/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */


select b.facid, b.starttime, f.name as facility, concat(m.firstname,' ',m.surname) as membername, 
	case when (m.firstname = 'GUEST' and f.guestcost * b.slots > 30) then f.guestcost * b.slots
	when (m.firstname != 'GUEST' and f.membercost * b.slots > 30) then f.membercost * b.slots
end as cost
from Bookings as b
inner join Members as m
	on m.memid = b.memid
inner join Facilities as f
	on f.facid = b.facid
having b.starttime like '2012-09-14%' and cost is not null
order by cost desc;



/* Q9: This time, produce the same result as in Q8, but using a subquery. */

select b.facid, b.starttime, f.name as facility, concat(m.firstname,' ',m.surname) as membername, 
(select distinct f.guestcost * b.slots from Facilities where f.guestcost * b.slots > 30 and m.firstname = 'GUEST') + 
(select distinct f.membercost * b.slots from Facilities where f.membercost * b.slots > 30 and m.firstname != 'GUEST') 
as cost
from Bookings as b
inner join Members as m
	on m.memid = b.memid
inner join Facilities as f
	on f.facid = b.facid
having b.starttime like '2012-09-14%' and  cost is not null
order by cost desc;


/* PART 2: SQLite

Export the country club data from PHPMyAdmin, and connect to a local SQLite instance from Jupyter notebook 
for the following questions.  

QUESTIONS:
/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */

select f.name as facility,  
		sum(case when m.firstname = 'GUEST' then f.guestcost * b.slots
				when m.firstname != 'GUEST' then f.membercost * b.slots
				end) as revenue
from bookings as b
inner join members as m
	on m.memid = b.memid
inner join facilities as f
	on f.facid = b.facid
group by f.name
having revenue > 1000
order by revenue desc;



/* Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order */

select a.memid as memberID, 
        concat(a.surname,', ',a.firstname) as member,
        b.memid as recommenderID,
        concat(b.surname,', ',b.firstname) as recommender
from members a, members b 
where a.recommendedby = b.memid and a.memid != 0 and b.memid != 0
order by a.surname;

/* Q12: Find the facilities with their usage by member, but not guests */

SELECT b.facid as facilityID, 
	sum(b.slots) as memberusage 
FROM bookings as b 
WHERE b.memid != 0 
group by b.facid 
order by b.facid

/* Q13: Find the facilities usage by month, but not guests */

SELECT month(b.starttime) as month, 
	sum(b.slots) as facilityusage 
FROM bookings as b 
WHERE b.memid != 0 
group by month(b.starttime) 
order by month(b.starttime)